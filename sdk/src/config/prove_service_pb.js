// source: prove_service_2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

goog.exportSymbol("proto.prove_service.Empty", null, global);
goog.exportSymbol("proto.prove_service.GetPublicKeyResponse", null, global);
goog.exportSymbol("proto.prove_service.ProveBaseRequest", null, global);
goog.exportSymbol("proto.prove_service.ProveNosha256OffchainRequest", null, global);
goog.exportSymbol("proto.prove_service.ProveNosha256OffchainResponse", null, global);
goog.exportSymbol("proto.prove_service.ProveNosha256Request", null, global);
goog.exportSymbol("proto.prove_service.ProveNosha256Response", null, global);
goog.exportSymbol("proto.prove_service.ProveNosha256WithWitnessRequest", null, global);
goog.exportSymbol("proto.prove_service.ProveNosha256WithWitnessResponse", null, global);
goog.exportSymbol("proto.prove_service.ProveRequest", null, global);
goog.exportSymbol("proto.prove_service.ProveResponse", null, global);
goog.exportSymbol("proto.prove_service.ProveWithWitnessRequest", null, global);
goog.exportSymbol("proto.prove_service.ProveWithWitnessResponse", null, global);
goog.exportSymbol("proto.prove_service.StatusResponse", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveBaseRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveBaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveBaseRequest.displayName = "proto.prove_service.ProveBaseRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.StatusResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.StatusResponse.displayName = "proto.prove_service.StatusResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveRequest.displayName = "proto.prove_service.ProveRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveWithWitnessRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveWithWitnessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveWithWitnessRequest.displayName =
    "proto.prove_service.ProveWithWitnessRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveNosha256Request = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveNosha256Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveNosha256Request.displayName = "proto.prove_service.ProveNosha256Request";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveNosha256WithWitnessRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveNosha256WithWitnessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveNosha256WithWitnessRequest.displayName =
    "proto.prove_service.ProveNosha256WithWitnessRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveNosha256OffchainRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveNosha256OffchainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveNosha256OffchainRequest.displayName =
    "proto.prove_service.ProveNosha256OffchainRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.GetPublicKeyResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.GetPublicKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.GetPublicKeyResponse.displayName = "proto.prove_service.GetPublicKeyResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveResponse.displayName = "proto.prove_service.ProveResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveWithWitnessResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveWithWitnessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveWithWitnessResponse.displayName =
    "proto.prove_service.ProveWithWitnessResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveNosha256Response = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveNosha256Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveNosha256Response.displayName =
    "proto.prove_service.ProveNosha256Response";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveNosha256WithWitnessResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveNosha256WithWitnessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveNosha256WithWitnessResponse.displayName =
    "proto.prove_service.ProveNosha256WithWitnessResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.ProveNosha256OffchainResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.ProveNosha256OffchainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.ProveNosha256OffchainResponse.displayName =
    "proto.prove_service.ProveNosha256OffchainResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prove_service.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prove_service.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prove_service.Empty.displayName = "proto.prove_service.Empty";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveBaseRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveBaseRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveBaseRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveBaseRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        proverId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        circuitTemplateId: jspb.Message.getFieldWithDefault(msg, 2, ""),
        inputData: jspb.Message.getFieldWithDefault(msg, 3, ""),
        isEncrypted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
        authToken: jspb.Message.getFieldWithDefault(msg, 5, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveBaseRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveBaseRequest();
  return proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveBaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setProverId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCircuitTemplateId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setInputData(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsEncrypted(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAuthToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveBaseRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveBaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveBaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveBaseRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getProverId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCircuitTemplateId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getInputData();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getIsEncrypted();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string prover_id = 1;
 * @return {string}
 */
proto.prove_service.ProveBaseRequest.prototype.getProverId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveBaseRequest} returns this
 */
proto.prove_service.ProveBaseRequest.prototype.setProverId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string circuit_template_id = 2;
 * @return {string}
 */
proto.prove_service.ProveBaseRequest.prototype.getCircuitTemplateId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveBaseRequest} returns this
 */
proto.prove_service.ProveBaseRequest.prototype.setCircuitTemplateId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string input_data = 3;
 * @return {string}
 */
proto.prove_service.ProveBaseRequest.prototype.getInputData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveBaseRequest} returns this
 */
proto.prove_service.ProveBaseRequest.prototype.setInputData = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool is_encrypted = 4;
 * @return {boolean}
 */
proto.prove_service.ProveBaseRequest.prototype.getIsEncrypted = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};

/**
 * @param {boolean} value
 * @return {!proto.prove_service.ProveBaseRequest} returns this
 */
proto.prove_service.ProveBaseRequest.prototype.setIsEncrypted = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional string auth_token = 5;
 * @return {string}
 */
proto.prove_service.ProveBaseRequest.prototype.getAuthToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveBaseRequest} returns this
 */
proto.prove_service.ProveBaseRequest.prototype.setAuthToken = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.StatusResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.StatusResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.StatusResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.StatusResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.StatusResponse}
 */
proto.prove_service.StatusResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.StatusResponse();
  return proto.prove_service.StatusResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.StatusResponse}
 */
proto.prove_service.StatusResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMsg(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.StatusResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.StatusResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.prove_service.StatusResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.prove_service.StatusResponse} returns this
 */
proto.prove_service.StatusResponse.prototype.setCode = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string msg = 2;
 * @return {string}
 */
proto.prove_service.StatusResponse.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.StatusResponse} returns this
 */
proto.prove_service.StatusResponse.prototype.setMsg = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseRequest:
          (f = msg.getBaseRequest()) &&
          proto.prove_service.ProveBaseRequest.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveRequest}
 */
proto.prove_service.ProveRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveRequest();
  return proto.prove_service.ProveRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveRequest}
 */
proto.prove_service.ProveRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.ProveBaseRequest();
        reader.readMessage(value, proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader);
        msg.setBaseRequest(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseRequest();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.ProveBaseRequest.serializeBinaryToWriter);
  }
};

/**
 * optional ProveBaseRequest base_request = 1;
 * @return {?proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveRequest.prototype.getBaseRequest = function () {
  return /** @type{?proto.prove_service.ProveBaseRequest} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.ProveBaseRequest, 1)
  );
};

/**
 * @param {?proto.prove_service.ProveBaseRequest|undefined} value
 * @return {!proto.prove_service.ProveRequest} returns this
 */
proto.prove_service.ProveRequest.prototype.setBaseRequest = function (value) {
  console.log("jspb -->", jspb);
  return;
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveRequest} returns this
 */
proto.prove_service.ProveRequest.prototype.clearBaseRequest = function () {
  return this.setBaseRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveRequest.prototype.hasBaseRequest = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveWithWitnessRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveWithWitnessRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveWithWitnessRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveWithWitnessRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseRequest:
          (f = msg.getBaseRequest()) &&
          proto.prove_service.ProveBaseRequest.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveWithWitnessRequest}
 */
proto.prove_service.ProveWithWitnessRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveWithWitnessRequest();
  return proto.prove_service.ProveWithWitnessRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveWithWitnessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveWithWitnessRequest}
 */
proto.prove_service.ProveWithWitnessRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.ProveBaseRequest();
        reader.readMessage(value, proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader);
        msg.setBaseRequest(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveWithWitnessRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveWithWitnessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveWithWitnessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveWithWitnessRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseRequest();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.ProveBaseRequest.serializeBinaryToWriter);
  }
};

/**
 * optional ProveBaseRequest base_request = 1;
 * @return {?proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveWithWitnessRequest.prototype.getBaseRequest = function () {
  return /** @type{?proto.prove_service.ProveBaseRequest} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.ProveBaseRequest, 1)
  );
};

/**
 * @param {?proto.prove_service.ProveBaseRequest|undefined} value
 * @return {!proto.prove_service.ProveWithWitnessRequest} returns this
 */
proto.prove_service.ProveWithWitnessRequest.prototype.setBaseRequest = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveWithWitnessRequest} returns this
 */
proto.prove_service.ProveWithWitnessRequest.prototype.clearBaseRequest = function () {
  return this.setBaseRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveWithWitnessRequest.prototype.hasBaseRequest = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveNosha256Request.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveNosha256Request.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveNosha256Request} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveNosha256Request.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseRequest:
          (f = msg.getBaseRequest()) &&
          proto.prove_service.ProveBaseRequest.toObject(includeInstance, f),
        length: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveNosha256Request}
 */
proto.prove_service.ProveNosha256Request.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveNosha256Request();
  return proto.prove_service.ProveNosha256Request.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveNosha256Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveNosha256Request}
 */
proto.prove_service.ProveNosha256Request.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.ProveBaseRequest();
        reader.readMessage(value, proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader);
        msg.setBaseRequest(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLength(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256Request.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveNosha256Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveNosha256Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveNosha256Request.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseRequest();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.ProveBaseRequest.serializeBinaryToWriter);
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
};

/**
 * optional ProveBaseRequest base_request = 1;
 * @return {?proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveNosha256Request.prototype.getBaseRequest = function () {
  return /** @type{?proto.prove_service.ProveBaseRequest} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.ProveBaseRequest, 1)
  );
};

/**
 * @param {?proto.prove_service.ProveBaseRequest|undefined} value
 * @return {!proto.prove_service.ProveNosha256Request} returns this
 */
proto.prove_service.ProveNosha256Request.prototype.setBaseRequest = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveNosha256Request} returns this
 */
proto.prove_service.ProveNosha256Request.prototype.clearBaseRequest = function () {
  return this.setBaseRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveNosha256Request.prototype.hasBaseRequest = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int32 length = 2;
 * @return {number}
 */
proto.prove_service.ProveNosha256Request.prototype.getLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.prove_service.ProveNosha256Request} returns this
 */
proto.prove_service.ProveNosha256Request.prototype.setLength = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveNosha256WithWitnessRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.prove_service.ProveNosha256WithWitnessRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveNosha256WithWitnessRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveNosha256WithWitnessRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseRequest:
          (f = msg.getBaseRequest()) &&
          proto.prove_service.ProveBaseRequest.toObject(includeInstance, f),
        length: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveNosha256WithWitnessRequest}
 */
proto.prove_service.ProveNosha256WithWitnessRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveNosha256WithWitnessRequest();
  return proto.prove_service.ProveNosha256WithWitnessRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveNosha256WithWitnessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveNosha256WithWitnessRequest}
 */
proto.prove_service.ProveNosha256WithWitnessRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.ProveBaseRequest();
        reader.readMessage(value, proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader);
        msg.setBaseRequest(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLength(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveNosha256WithWitnessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveNosha256WithWitnessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveNosha256WithWitnessRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getBaseRequest();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.ProveBaseRequest.serializeBinaryToWriter);
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
};

/**
 * optional ProveBaseRequest base_request = 1;
 * @return {?proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.getBaseRequest = function () {
  return /** @type{?proto.prove_service.ProveBaseRequest} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.ProveBaseRequest, 1)
  );
};

/**
 * @param {?proto.prove_service.ProveBaseRequest|undefined} value
 * @return {!proto.prove_service.ProveNosha256WithWitnessRequest} returns this
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.setBaseRequest = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveNosha256WithWitnessRequest} returns this
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.clearBaseRequest = function () {
  return this.setBaseRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.hasBaseRequest = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int32 length = 2;
 * @return {number}
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.getLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.prove_service.ProveNosha256WithWitnessRequest} returns this
 */
proto.prove_service.ProveNosha256WithWitnessRequest.prototype.setLength = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveNosha256OffchainRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.prove_service.ProveNosha256OffchainRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveNosha256OffchainRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveNosha256OffchainRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseRequest:
          (f = msg.getBaseRequest()) &&
          proto.prove_service.ProveBaseRequest.toObject(includeInstance, f),
        length: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveNosha256OffchainRequest}
 */
proto.prove_service.ProveNosha256OffchainRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveNosha256OffchainRequest();
  return proto.prove_service.ProveNosha256OffchainRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveNosha256OffchainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveNosha256OffchainRequest}
 */
proto.prove_service.ProveNosha256OffchainRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.ProveBaseRequest();
        reader.readMessage(value, proto.prove_service.ProveBaseRequest.deserializeBinaryFromReader);
        msg.setBaseRequest(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLength(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveNosha256OffchainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveNosha256OffchainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveNosha256OffchainRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getBaseRequest();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.ProveBaseRequest.serializeBinaryToWriter);
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
};

/**
 * optional ProveBaseRequest base_request = 1;
 * @return {?proto.prove_service.ProveBaseRequest}
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.getBaseRequest = function () {
  return /** @type{?proto.prove_service.ProveBaseRequest} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.ProveBaseRequest, 1)
  );
};

/**
 * @param {?proto.prove_service.ProveBaseRequest|undefined} value
 * @return {!proto.prove_service.ProveNosha256OffchainRequest} returns this
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.setBaseRequest = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveNosha256OffchainRequest} returns this
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.clearBaseRequest = function () {
  return this.setBaseRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.hasBaseRequest = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int32 length = 2;
 * @return {number}
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.getLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.prove_service.ProveNosha256OffchainRequest} returns this
 */
proto.prove_service.ProveNosha256OffchainRequest.prototype.setLength = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.GetPublicKeyResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.GetPublicKeyResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.GetPublicKeyResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.GetPublicKeyResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseResponse:
          (f = msg.getBaseResponse()) &&
          proto.prove_service.StatusResponse.toObject(includeInstance, f),
        publicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.GetPublicKeyResponse}
 */
proto.prove_service.GetPublicKeyResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.GetPublicKeyResponse();
  return proto.prove_service.GetPublicKeyResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.GetPublicKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.GetPublicKeyResponse}
 */
proto.prove_service.GetPublicKeyResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.StatusResponse();
        reader.readMessage(value, proto.prove_service.StatusResponse.deserializeBinaryFromReader);
        msg.setBaseResponse(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPublicKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.GetPublicKeyResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.GetPublicKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.GetPublicKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.GetPublicKeyResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseResponse();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.StatusResponse.serializeBinaryToWriter);
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusResponse base_response = 1;
 * @return {?proto.prove_service.StatusResponse}
 */
proto.prove_service.GetPublicKeyResponse.prototype.getBaseResponse = function () {
  return /** @type{?proto.prove_service.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.StatusResponse, 1)
  );
};

/**
 * @param {?proto.prove_service.StatusResponse|undefined} value
 * @return {!proto.prove_service.GetPublicKeyResponse} returns this
 */
proto.prove_service.GetPublicKeyResponse.prototype.setBaseResponse = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.GetPublicKeyResponse} returns this
 */
proto.prove_service.GetPublicKeyResponse.prototype.clearBaseResponse = function () {
  return this.setBaseResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.GetPublicKeyResponse.prototype.hasBaseResponse = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.prove_service.GetPublicKeyResponse.prototype.getPublicKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.GetPublicKeyResponse} returns this
 */
proto.prove_service.GetPublicKeyResponse.prototype.setPublicKey = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseResponse:
          (f = msg.getBaseResponse()) &&
          proto.prove_service.StatusResponse.toObject(includeInstance, f),
        proofData: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveResponse}
 */
proto.prove_service.ProveResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveResponse();
  return proto.prove_service.ProveResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveResponse}
 */
proto.prove_service.ProveResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.StatusResponse();
        reader.readMessage(value, proto.prove_service.StatusResponse.deserializeBinaryFromReader);
        msg.setBaseResponse(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setProofData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseResponse();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.StatusResponse.serializeBinaryToWriter);
  }
  f = message.getProofData();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusResponse base_response = 1;
 * @return {?proto.prove_service.StatusResponse}
 */
proto.prove_service.ProveResponse.prototype.getBaseResponse = function () {
  return /** @type{?proto.prove_service.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.StatusResponse, 1)
  );
};

/**
 * @param {?proto.prove_service.StatusResponse|undefined} value
 * @return {!proto.prove_service.ProveResponse} returns this
 */
proto.prove_service.ProveResponse.prototype.setBaseResponse = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveResponse} returns this
 */
proto.prove_service.ProveResponse.prototype.clearBaseResponse = function () {
  return this.setBaseResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveResponse.prototype.hasBaseResponse = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string proof_data = 2;
 * @return {string}
 */
proto.prove_service.ProveResponse.prototype.getProofData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveResponse} returns this
 */
proto.prove_service.ProveResponse.prototype.setProofData = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveWithWitnessResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveWithWitnessResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveWithWitnessResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveWithWitnessResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseResponse:
          (f = msg.getBaseResponse()) &&
          proto.prove_service.StatusResponse.toObject(includeInstance, f),
        proofData: jspb.Message.getFieldWithDefault(msg, 2, ""),
        witnessData: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveWithWitnessResponse}
 */
proto.prove_service.ProveWithWitnessResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveWithWitnessResponse();
  return proto.prove_service.ProveWithWitnessResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveWithWitnessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveWithWitnessResponse}
 */
proto.prove_service.ProveWithWitnessResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.StatusResponse();
        reader.readMessage(value, proto.prove_service.StatusResponse.deserializeBinaryFromReader);
        msg.setBaseResponse(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setProofData(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setWitnessData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveWithWitnessResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveWithWitnessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveWithWitnessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveWithWitnessResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseResponse();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.StatusResponse.serializeBinaryToWriter);
  }
  f = message.getProofData();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getWitnessData();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional StatusResponse base_response = 1;
 * @return {?proto.prove_service.StatusResponse}
 */
proto.prove_service.ProveWithWitnessResponse.prototype.getBaseResponse = function () {
  return /** @type{?proto.prove_service.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.StatusResponse, 1)
  );
};

/**
 * @param {?proto.prove_service.StatusResponse|undefined} value
 * @return {!proto.prove_service.ProveWithWitnessResponse} returns this
 */
proto.prove_service.ProveWithWitnessResponse.prototype.setBaseResponse = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveWithWitnessResponse} returns this
 */
proto.prove_service.ProveWithWitnessResponse.prototype.clearBaseResponse = function () {
  return this.setBaseResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveWithWitnessResponse.prototype.hasBaseResponse = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string proof_data = 2;
 * @return {string}
 */
proto.prove_service.ProveWithWitnessResponse.prototype.getProofData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveWithWitnessResponse} returns this
 */
proto.prove_service.ProveWithWitnessResponse.prototype.setProofData = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string witness_data = 3;
 * @return {string}
 */
proto.prove_service.ProveWithWitnessResponse.prototype.getWitnessData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveWithWitnessResponse} returns this
 */
proto.prove_service.ProveWithWitnessResponse.prototype.setWitnessData = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveNosha256Response.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.ProveNosha256Response.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveNosha256Response} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveNosha256Response.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseResponse:
          (f = msg.getBaseResponse()) &&
          proto.prove_service.StatusResponse.toObject(includeInstance, f),
        proofData: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveNosha256Response}
 */
proto.prove_service.ProveNosha256Response.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveNosha256Response();
  return proto.prove_service.ProveNosha256Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveNosha256Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveNosha256Response}
 */
proto.prove_service.ProveNosha256Response.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.StatusResponse();
        reader.readMessage(value, proto.prove_service.StatusResponse.deserializeBinaryFromReader);
        msg.setBaseResponse(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setProofData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256Response.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveNosha256Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveNosha256Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveNosha256Response.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBaseResponse();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.StatusResponse.serializeBinaryToWriter);
  }
  f = message.getProofData();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusResponse base_response = 1;
 * @return {?proto.prove_service.StatusResponse}
 */
proto.prove_service.ProveNosha256Response.prototype.getBaseResponse = function () {
  return /** @type{?proto.prove_service.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.StatusResponse, 1)
  );
};

/**
 * @param {?proto.prove_service.StatusResponse|undefined} value
 * @return {!proto.prove_service.ProveNosha256Response} returns this
 */
proto.prove_service.ProveNosha256Response.prototype.setBaseResponse = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveNosha256Response} returns this
 */
proto.prove_service.ProveNosha256Response.prototype.clearBaseResponse = function () {
  return this.setBaseResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveNosha256Response.prototype.hasBaseResponse = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string proof_data = 2;
 * @return {string}
 */
proto.prove_service.ProveNosha256Response.prototype.getProofData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveNosha256Response} returns this
 */
proto.prove_service.ProveNosha256Response.prototype.setProofData = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveNosha256WithWitnessResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.prove_service.ProveNosha256WithWitnessResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveNosha256WithWitnessResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveNosha256WithWitnessResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseResponse:
          (f = msg.getBaseResponse()) &&
          proto.prove_service.StatusResponse.toObject(includeInstance, f),
        proofData: jspb.Message.getFieldWithDefault(msg, 2, ""),
        witnessData: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveNosha256WithWitnessResponse}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveNosha256WithWitnessResponse();
  return proto.prove_service.ProveNosha256WithWitnessResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveNosha256WithWitnessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveNosha256WithWitnessResponse}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.StatusResponse();
        reader.readMessage(value, proto.prove_service.StatusResponse.deserializeBinaryFromReader);
        msg.setBaseResponse(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setProofData(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setWitnessData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveNosha256WithWitnessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveNosha256WithWitnessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveNosha256WithWitnessResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getBaseResponse();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.StatusResponse.serializeBinaryToWriter);
  }
  f = message.getProofData();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getWitnessData();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional StatusResponse base_response = 1;
 * @return {?proto.prove_service.StatusResponse}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.getBaseResponse = function () {
  return /** @type{?proto.prove_service.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.StatusResponse, 1)
  );
};

/**
 * @param {?proto.prove_service.StatusResponse|undefined} value
 * @return {!proto.prove_service.ProveNosha256WithWitnessResponse} returns this
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.setBaseResponse = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveNosha256WithWitnessResponse} returns this
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.clearBaseResponse = function () {
  return this.setBaseResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.hasBaseResponse = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string proof_data = 2;
 * @return {string}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.getProofData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveNosha256WithWitnessResponse} returns this
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.setProofData = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string witness_data = 3;
 * @return {string}
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.getWitnessData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveNosha256WithWitnessResponse} returns this
 */
proto.prove_service.ProveNosha256WithWitnessResponse.prototype.setWitnessData = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.ProveNosha256OffchainResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.prove_service.ProveNosha256OffchainResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.ProveNosha256OffchainResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.ProveNosha256OffchainResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        baseResponse:
          (f = msg.getBaseResponse()) &&
          proto.prove_service.StatusResponse.toObject(includeInstance, f),
        proofData: msg.getProofData_asB64(),
        witnessData: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.ProveNosha256OffchainResponse}
 */
proto.prove_service.ProveNosha256OffchainResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.ProveNosha256OffchainResponse();
  return proto.prove_service.ProveNosha256OffchainResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.ProveNosha256OffchainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.ProveNosha256OffchainResponse}
 */
proto.prove_service.ProveNosha256OffchainResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.prove_service.StatusResponse();
        reader.readMessage(value, proto.prove_service.StatusResponse.deserializeBinaryFromReader);
        msg.setBaseResponse(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setProofData(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setWitnessData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.ProveNosha256OffchainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.ProveNosha256OffchainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.ProveNosha256OffchainResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getBaseResponse();
  if (f != null) {
    writer.writeMessage(1, f, proto.prove_service.StatusResponse.serializeBinaryToWriter);
  }
  f = message.getProofData_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getWitnessData();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional StatusResponse base_response = 1;
 * @return {?proto.prove_service.StatusResponse}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.getBaseResponse = function () {
  return /** @type{?proto.prove_service.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.prove_service.StatusResponse, 1)
  );
};

/**
 * @param {?proto.prove_service.StatusResponse|undefined} value
 * @return {!proto.prove_service.ProveNosha256OffchainResponse} returns this
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.setBaseResponse = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.prove_service.ProveNosha256OffchainResponse} returns this
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.clearBaseResponse = function () {
  return this.setBaseResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.hasBaseResponse = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes proof_data = 2;
 * @return {string}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.getProofData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes proof_data = 2;
 * This is a type-conversion wrapper around `getProofData()`
 * @return {string}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.getProofData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getProofData()));
};

/**
 * optional bytes proof_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofData()`
 * @return {!Uint8Array}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.getProofData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getProofData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prove_service.ProveNosha256OffchainResponse} returns this
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.setProofData = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional string witness_data = 3;
 * @return {string}
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.getWitnessData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.prove_service.ProveNosha256OffchainResponse} returns this
 */
proto.prove_service.ProveNosha256OffchainResponse.prototype.setWitnessData = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.prove_service.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.prove_service.Empty.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.prove_service.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.prove_service.Empty.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prove_service.Empty}
 */
proto.prove_service.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prove_service.Empty();
  return proto.prove_service.Empty.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prove_service.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prove_service.Empty}
 */
proto.prove_service.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prove_service.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.prove_service.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prove_service.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prove_service.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

goog.object.extend(exports, proto.prove_service);
